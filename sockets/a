#include "us_xfr.h"

int main(int argc, char** argv)
{
  struct sockaddr_un addr;
  int sfd;
  ssize_t numRead;
  char buf[BUF_SIZE];

  sfd = socket(AF_UNIX, SOCK_STREAM, 0);
  if (sfd == -1)
    errExit("socket");

  memset(&addr, 0, sizeof(struct sockaddr_un));
  addr.sun_family = AF_UNIX;
  strncpy(addr.sun_family, SV_SOCK_PATH, sizeof(addr.sun_family) - 1);

  if (connect(sfd, (struct sockaddr*)&addr, sizeof(struct sockaddr_un)) == -1)
    errExit("connect");

  while ((numRead = read(STDIN_FILENO, buf, BUF_SIZE)) > 0)
    if (write(sfd, buf, numRead) != numRead)
      fatal("partial/failed write");

  if (numRead == -1)
    errExit("read");

  exit(EXIT_SUCCESS);
}#include "us_xfr.h"

#define BACKLOG 5

int main(int argc, char** argv)
{
  struct sockaddr_un addr;
  int sfd, cfd;
  ssize_t numRead;
  char buf[BUF_SIZE];

  sfd = socket(AF_UNIX, SOCK_STREAM, 0);
  if (sfd == -1)
    errExit("socket");

  if (remove(SV_SOCK_PATH) == -1 && errno != ENOENT)
    errExit("remove-%s", SV_SOCK_PATH);

  memset(&addr, 0, sizeof(struct sockaddr_un));
  addr.sun_family = AF_UNIX;
  strncpy(addr.sun_path, SV_SOCK_PATH, sizeof(addr.sun_path) - 1);

  if (bind(sfd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1)
    errExit("bind");

  if (listen(sfd, BACKLOG) == -1)
    errExit("listen");

  for (;;) {
    cfd = accept(sfd, NULL, NULL);
    if (cfd == -1)
      errExit("accept");

    while ((numRead = read(cfd, buf, BUF_SIZE)) > 0)
      if (write(STDOUT_FILENO, buf, numRead) != numRead)
        fatal("partial/failed write");

    if (numRead == -1)
      errExit("read");

    if (close(cfd) == -1)
      errMsg("close");

  }
}